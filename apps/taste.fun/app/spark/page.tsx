"use client";

import { useState, useEffect } from 'react';
import { ArrowLeft, Sparkles, AlertCircle, Loader2 } from 'lucide-react';
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation';
import { useConnection } from '@solana/wallet-adapter-react';
import { Card } from '@/components/ui/card';
import { CONSTANTS, lamportsToSol } from '@/lib/types/consensus-v3';
import { apiClient, type ThemeResponse } from '@/lib/api/client';
// import { createIdea } from '@/lib/anchor/instructions-v3';
// import { useAnchorProvider } from '@/lib/anchor/provider';

export default function SparkPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { connection } = useConnection();
  // const { program } = useAnchorProvider();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string>('');
  const [themes, setThemes] = useState<ThemeResponse[]>([]);
  const [loadingThemes, setLoadingThemes] = useState(true);
  const [formData, setFormData] = useState({
    prompt: '',
    votingDurationHours: 72,
    themeId: '',
  });

  // Load available themes and pre-select from URL param
  useEffect(() => {
    const loadThemes = async () => {
      try {
        const response = await apiClient.getThemes({ status: 'Active' });
        setThemes(response.data);
        
        // Pre-select theme from URL parameter if provided
        const themeParam = searchParams.get('theme');
        if (themeParam) {
          const matchingTheme = response.data.find((t: ThemeResponse) => 
            t.id === themeParam || t.themeId.toString() === themeParam
          );
          if (matchingTheme) {
            setFormData(prev => ({ ...prev, themeId: matchingTheme.id }));
          }
        }
      } catch (err) {
        console.error('Failed to load themes:', err);
      } finally {
        setLoadingThemes(false);
      }
    };

    loadThemes();
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    // Validation
    if (!formData.themeId) {
      setError('Please select a theme for your idea');
      return;
    }

    if (!formData.prompt.trim()) {
      setError('Please enter a prompt for your idea');
      return;
    }

    if (formData.prompt.length > CONSTANTS.MAX_PROMPT_LEN) {
      setError(`Prompt must be less than ${CONSTANTS.MAX_PROMPT_LEN} characters`);
      return;
    }

    if (formData.votingDurationHours < 24 || formData.votingDurationHours > 168) {
      setError('Voting duration must be between 24 and 168 hours');
      return;
    }

    setIsSubmitting(true);

    try {
      // TODO: Integrate Anchor with theme
      // const selectedTheme = themes.find(t => t.publicKey.toString() === formData.themeId);
      // const { ideaPda, signature } = await createIdea(program!, {
      //   prompt: formData.prompt,
      //   theme: selectedTheme!.publicKey,
      //   depinProvider: DEFAULT_DEPIN_PROVIDER,
      //   votingDurationHours: formData.votingDurationHours,
      // });
      
      // Temporary simulation
      await new Promise((resolve) => setTimeout(resolve, 2000));
      
      alert('Spark created successfully! 🎉\n\nIn production:\n- Images will be generated by DePIN\n- Voting will use theme tokens\n- You\'ll receive notifications');
      
      // router.push(`/idea/${ideaPda.toString()}`);
      router.push('/');
    } catch (err: any) {
      console.error('Failed to create spark:', err);
      setError(err.message || 'Failed to create spark. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Link
          href="/"
          className="p-2 rounded-lg hover:bg-[var(--surface)] transition-colors"
        >
          <ArrowLeft size={20} />
        </Link>
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-white">Create a Spark</h1>
          <p className="text-zinc-400 text-sm mt-1">
            ✨ Taste & Earn: Submit a prompt, AI generates 4 images, community votes
          </p>
        </div>
      </div>

      {/* Info Banner */}
      <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 flex gap-3">
        <Sparkles className="text-blue-400 flex-shrink-0 mt-0.5" size={20} />
        <div className="text-sm text-blue-200">
          <strong className="block mb-1">How Theme-Based Taste & Earn Works:</strong>
          <ol className="list-decimal list-inside space-y-1 text-blue-200/80">
            <li>Select a theme (each has its own token and voting rules)</li>
            <li>Submit an AI image generation prompt for that theme</li>
            <li>DePIN automatically generates 4 images (24h)</li>
            <li>Reviewers stake theme tokens to vote for the best image</li>
            <li>Winners split losers' 50% stake based on voting mode</li>
            <li>You receive 1% curator fee in tokens + winning NFT rights</li>
          </ol>
        </div>
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit}>
        <Card>
          <Card.Content className="p-6 space-y-6">
            <h2 className="text-xl font-semibold text-white">
              Describe Your Vision
            </h2>

            {/* Theme Selection */}
            <div>
              <label className="block text-sm font-medium text-zinc-300 mb-2">
                Select Theme *
              </label>
              {loadingThemes ? (
                <div className="flex items-center gap-2 text-zinc-400 text-sm">
                  <Loader2 size={16} className="animate-spin" />
                  Loading themes...
                </div>
              ) : themes.length === 0 ? (
                <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4">
                  <p className="text-sm text-amber-200">
                    No active themes available. <Link href="/theme/create" className="underline">Create one first</Link>
                  </p>
                </div>
              ) : (
                <>
                  <select
                    value={formData.themeId}
                    onChange={(e) =>
                      setFormData({ ...formData, themeId: e.target.value })
                    }
                    className="w-full px-4 py-3 bg-zinc-900 border border-zinc-800 rounded-lg text-white focus:outline-none focus:border-[var(--brand)] focus:ring-1 focus:ring-[var(--brand)]"
                    required
                  >
                    <option value="">Choose a theme...</option>
                    {themes.map((theme) => (
                      <option key={theme.id} value={theme.id}>
                        {theme.name} ({theme.votingMode})
                      </option>
                    ))}
                  </select>
                  {formData.themeId && (
                    <div className="mt-2 p-3 bg-zinc-900/50 rounded-lg">
                      {(() => {
                        const selected = themes.find(t => t.id === formData.themeId);
                        if (!selected) return null;
                        return (
                          <div className="text-xs text-zinc-400 space-y-1">
                            <p><strong className="text-white">Description:</strong> {selected.description}</p>
                            <p><strong className="text-white">Voting Mode:</strong> {selected.votingMode}</p>
                            <p><strong className="text-white">Token Price:</strong> {selected.currentPrice.toFixed(9)} SOL</p>
                            <p><strong className="text-white">Ideas Created:</strong> {selected.totalIdeas || 0}</p>
                          </div>
                        );
                      })()}
                    </div>
                  )}
                </>
              )}
              <p className="text-xs text-zinc-500 mt-1">
                Voters will need this theme's tokens to participate
              </p>
            </div>

            {/* Prompt Input */}
            <div>
              <label className="block text-sm font-medium text-zinc-300 mb-2">
                AI Image Generation Prompt *
              </label>
              <textarea
                rows={8}
                placeholder="Example: A cyberpunk cityscape at night with neon signs, flying cars, and holographic billboards. Style: Blade Runner 2049, high detail, cinematic lighting, 4K quality..."
                value={formData.prompt}
                onChange={(e) =>
                  setFormData({ ...formData, prompt: e.target.value })
                }
                className="w-full px-4 py-3 bg-zinc-900 border border-zinc-800 rounded-lg text-white placeholder:text-zinc-600 focus:outline-none focus:border-[var(--brand)] focus:ring-1 focus:ring-[var(--brand)] resize-none"
                maxLength={CONSTANTS.MAX_PROMPT_LEN}
                required
              />
              <p className="text-xs text-zinc-500 mt-1 flex justify-between">
                <span>Be specific: describe style, mood, colors, composition, etc.</span>
                <span>{formData.prompt.length} / {CONSTANTS.MAX_PROMPT_LEN}</span>
              </p>
            </div>

            {/* Voting Duration */}
            <div>
              <label className="block text-sm font-medium text-zinc-300 mb-2">
                Voting Duration (Hours) *
              </label>
              <input
                type="number"
                min="24"
                max="168"
                value={formData.votingDurationHours}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    votingDurationHours: parseInt(e.target.value) || 72,
                  })
                }
                className="w-full px-4 py-3 bg-zinc-900 border border-zinc-800 rounded-lg text-white placeholder:text-zinc-600 focus:outline-none focus:border-[var(--brand)] focus:ring-1 focus:ring-[var(--brand)]"
                required
              />
              <p className="text-xs text-zinc-500 mt-1">
                Recommended: 72 hours (3 days). Min: 24h, Max: 168h (7 days)
              </p>
            </div>

            {/* Divider */}
            <div className="border-t border-zinc-800" />

            {/* Cost Summary */}
            <div className="bg-zinc-900/50 rounded-lg p-4 space-y-2">
              <h3 className="text-sm font-medium text-white mb-3">
                💰 Cost Breakdown
              </h3>
              <div className="flex justify-between text-sm">
                <span className="text-zinc-400">Creation Fee (non-refundable):</span>
                <span className="text-white font-medium">
                  {lamportsToSol(CONSTANTS.CREATION_FEE)} SOL
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-zinc-400">Transaction Fee (est.):</span>
                <span className="text-white font-medium">~0.00001 SOL</span>
              </div>
              <div className="pt-2 border-t border-zinc-800 flex justify-between text-sm">
                <span className="text-zinc-300 font-medium">Total:</span>
                <span className="text-[var(--brand)] font-bold">
                  ~{(lamportsToSol(CONSTANTS.CREATION_FEE) + 0.00001).toFixed(5)} SOL
                </span>
              </div>
            </div>

            {/* Earnings Info */}
            <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
              <h3 className="text-sm font-medium text-green-200 mb-2">
                📈 Your Potential Earnings
              </h3>
              <ul className="text-xs text-green-200/80 space-y-1">
                <li>
                  • <strong>1% Curator Fee</strong> from all theme token stakes (paid in tokens after voting)
                </li>
                <li>
                  • <strong>NFT Ownership</strong> of the winning image (future resale royalties)
                </li>
                <li>
                  • Example: If 50 people vote with 1000 tokens each, you earn 500 tokens instantly
                </li>
                <li>
                  • <strong>Token Buyback:</strong> 5% of voting proceeds are used to buy back and burn theme tokens
                </li>
              </ul>
            </div>

            {/* Error Message */}
            {error && (
              <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 flex gap-3">
                <AlertCircle className="text-red-400 flex-shrink-0 mt-0.5" size={20} />
                <p className="text-sm text-red-200">{error}</p>
              </div>
            )}
          </Card.Content>
        </Card>

        {/* Action Buttons */}
        <div className="flex gap-3 justify-between mt-6">
          <Link
            href="/"
            className="px-6 py-3 rounded-lg border border-zinc-700 text-white hover:bg-zinc-800 transition-colors"
          >
            Cancel
          </Link>

          <button
            type="submit"
            disabled={isSubmitting}
            className="btn px-8 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isSubmitting ? (
              <>
                <Loader2 size={16} className="animate-spin" />
                Creating...
              </>
            ) : (
              <>
                <Sparkles size={16} />
                Launch Spark 🚀
              </>
            )}
          </button>
        </div>
      </form>

      {/* Additional Info */}
      <div className="bg-amber-500/10 border border-amber-500/30 rounded-lg p-4">
        <h3 className="text-sm font-medium text-amber-200 mb-2">
          ⚠️ Anti-Sybil Protection (MVP Approach)
        </h3>
        <p className="text-xs text-amber-200/80">
          To prevent manipulation, each reviewer can stake max <strong>1 SOL per idea</strong>.
          This is a simple MVP solution. Future versions will use reputation-based weighting.
        </p>
      </div>
    </div>
  );
}
